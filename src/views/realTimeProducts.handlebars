<h1 class="title">Products in real time</h1>

<div id="card-products-container" class="products-container">

    {{#each products}}
    <div class="card-product-item">
        <h2>{{this.title}}</h2>
        <p>{{this.description}}</p>
        <span>${{this.price}}</span>
        <button onclick="deleteProduct('{{this.id}}')" class="btn">Remove</button>
    </div>
    {{/each}}
</div>


<form id="add-product-form" class="form-add-product" action="/realtimeproducts" method="post">
    <h2>Add new Product</h2>
    <input type="text" id="product-title" placeholder="Title" required>
    <input type="text" id="product-description" placeholder="Description" required>
    <input type="number" id="product-price" placeholder="Price" required>
    <input type="number" id="product-stock" placeholder="Stock" required>
    <input type="text" id="product-category" placeholder="Category" required>
    <button type="submit" class="btn">Add Product</button>
</form>

<div class="link">
<a href="/">Back to Homepage</a>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>

    const socket = io();

    socket.on('update-products', (products) => {
        const productsContainer = document.getElementById('card-products-container');
        productsContainer.innerHTML = '';

        products.forEach(product => {
            const productElement = document.createElement('div');
            productElement.classList.add('card-product-item');
            productElement.innerHTML = `
                <h2>${product.title}</h2>
                <p>${product.description}</p>
                <span>$${product.price}</span>
                <button onclick="deleteProduct('${product.id}')" class="btn-delete">Eliminar Producto</button>
            `;
            productsContainer.appendChild(productElement);
        });
    });

    document.getElementById('add-product-form').addEventListener('submit', async (event) => {
        event.preventDefault();

        const titleInput = document.getElementById('product-title');
        const descriptionInput = document.getElementById('product-description');
        const priceInput = document.getElementById('product-price');
        const stockInput = document.getElementById('product-stock');
        const categoryInput = document.getElementById('product-category');

        // Validaciones
        if (!titleInput.value || !descriptionInput.value || !priceInput.value || !stockInput.value || !categoryInput.value) {
            alert('Por favor, complete todos los campos.');
            return;
        }

        const price = parseFloat(priceInput.value);
        const stock = parseInt(stockInput.value);

        if (isNaN(price) || isNaN(stock) || price < 1 || stock < 0) {
            alert('Ingrese valores válidos para Precio o Stock.');
            return;
        }

        // Valido que la category no contenga números
        const categoryRegex = /^[^\d]+$/;
        if (!categoryRegex.test(categoryInput.value)) {
            alert('El campo "Category" no debe contener números.');
            return;
        }

        // Valido que el títle no contenga números
        const titleRegex = /^[^\d]+$/;
        if (!titleRegex.test(titleInput.value)) {
            alert('El campo "Title" no debe contener números.');
            return;
        }

        const newProduct = {
            title: titleInput.value,
            description: descriptionInput.value,
            code: Date.now().toString(30),
            price: price,
            stock: stock,
            category: categoryInput.value
        };

        // Envio el nuevo producto al servidor
        socket.emit('new-product', newProduct);

        // Limpio los campos del formulario
        titleInput.value = '';
        descriptionInput.value = '';
        priceInput.value = '';
        stockInput.value = '';
        categoryInput.value = '';
    });

    function deleteProduct(productId) {
        console.log(`Eliminando producto con ID: ${productId}`);
        socket.emit('delete-product', productId);
    }
</script>